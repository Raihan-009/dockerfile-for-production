FROM node:22-slim AS base


FROM base AS deps
WORKDIR /app
COPY package*.json ./
RUN npm ci

# Rebuild the source code independently of the dependencies.

FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# The build command produces a "standalone" version
# of the application in the .next/standalone directory.

# Frameworks like Next.js (src) or Nuxt (src) have a way to produce a standalone build of the application, 
# that doesn't require the node_modules folder at runtime at all
RUN npm run build

# Production image contains only the "standalone" build.
# Runtime base for production
FROM node:22-alpine AS runner 
WORKDIR /app
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Note the handy --chown trick since the runtime image
# should use a non-root user.

# public for your unprocessed static assets
# standalone for the server code and runtime
# static for the build output that powers the client-side application

COPY --from=builder --chown=node:node /app/public ./public
COPY --from=builder --chown=node:node /app/.next/standalone ./
COPY --from=builder --chown=node:node /app/.next/static ./.next/static
ENV HOSTNAME="0.0.0.0"
ENV PORT=3000
EXPOSE 3000
USER node

# Avoid using npm start in the CMD or ENTRYPOINT
# because it introduces an extra shell sub-process,
# which often breaks SIGTERM signal propagation.

CMD ["node", "server.js"]




# Source [https://labs.iximiuz.com/challenges/dockerize-nodejs-application-nextjs] but modified! :D
